syntax = "proto2";

option go_package = "justinsb.com/kubee/machinery/apis/clientcmd/v1";


// Config holds the information needed to build connect to remote kubernetes clusters as a given user
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message Config {
	// Legacy field from pkg/api/types.go TypeMeta.
	// TODO(jlowdermilk): remove this after eliminating downstream dependencies.
	// +k8s:conversion-gen=false
	// +optional
	optional string kind = 1; //Kind string `json:"kind,omitempty"`

	// Legacy field from pkg/api/types.go TypeMeta.
	// TODO(jlowdermilk): remove this after eliminating downstream dependencies.
	// +k8s:conversion-gen=false
	// +optional
	optional string api_version = 2; // APIVersion string `json:"apiVersion,omitempty"`

	// Preferences holds general information to be use for cli interactions
	//Preferences Preferences `json:"preferences"`

	// Clusters is a map of referencable names to cluster configs
	//Clusters []NamedCluster `json:"clusters"`
	repeated NamedCluster clusters = 4;

	// AuthInfos is a map of referencable names to user configs
	//AuthInfos []NamedAuthInfo `json:"users"`
	repeated NamedAuthInfo users = 5;

	// Contexts is a map of referencable names to context configs
	//Contexts []NamedContext `json:"contexts"`
	repeated NamedContext contexts = 6;

	// CurrentContext is the name of the context that you would like to use by default
	//CurrentContext string `json:"current-context"`
	optional string current_context = 7 [json_name="current-context"];
	
	// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
	// +optional
	//Extensions []NamedExtension `json:"extensions,omitempty"`
}

// NamedContext relates nicknames to context information
message NamedContext {
	// Name is the nickname for this Context
	optional string name = 1; //Name string `json:"name"`
	// Context holds the context information
	optional Context context = 2; //Context Context `json:"context"`
}

// Context is a tuple of references to a cluster (how do I communicate with a kubernetes cluster), a user (how do I identify myself), and a namespace (what subset of resources do I want to work with)
message Context {
	// Cluster is the name of the cluster for this context
	optional string cluster = 1; //Cluster string `json:"cluster"`
	// AuthInfo is the name of the authInfo for this context
	optional string user = 2; //AuthInfo string `json:"user"`
	// Namespace is the default namespace to use on unspecified requests
	// +optional
	optional string namespace = 3; //	Namespace string `json:"namespace,omitempty"`
	// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
	// +optional
	//Extensions []NamedExtension `json:"extensions,omitempty"`
}

// NamedAuthInfo relates nicknames to auth information
message NamedAuthInfo {
	// Name is the nickname for this AuthInfo
	optional string name = 1; // Name string `json:"name"`
	// AuthInfo holds the auth information
	optional AuthInfo user = 2; //AuthInfo AuthInfo `json:"user"`
}



// AuthInfo contains information that describes identity information.  This is use to tell the kubernetes cluster who you are.
message AuthInfo {
	// ClientCertificate is the path to a client cert file for TLS.
	// +optional
	optional string client_certificate = 1 [json_name="client-certificate"] ;
	// ClientCertificate string `json:"client-certificate,omitempty"`
	// ClientCertificateData contains PEM-encoded data from a client cert file for TLS. Overrides ClientCertificate
	// +optional
	optional bytes client_certificate_data = 2 [json_name="client-certificate-data"];
	//ClientCertificateData []byte `json:"client-certificate-data,omitempty"`
	// ClientKey is the path to a client key file for TLS.
	// +optional
	//ClientKey string `json:"client-key,omitempty"`
	// ClientKeyData contains PEM-encoded data from a client key file for TLS. Overrides ClientKey
	// +optional
	//ClientKeyData []byte `json:"client-key-data,omitempty" datapolicy:"security-key"`
	optional bytes client_key_data = 4 [json_name="client-key-data"];
	// Token is the bearer token for authentication to the kubernetes cluster.
	// +optional
	//Token string `json:"token,omitempty" datapolicy:"token"`
	// TokenFile is a pointer to a file that contains a bearer token (as described above).  If both Token and TokenFile are present, Token takes precedence.
	// +optional
	//TokenFile string `json:"tokenFile,omitempty"`
	// Impersonate is the username to impersonate.  The name matches the flag.
	// +optional
	//Impersonate string `json:"as,omitempty"`
	// ImpersonateUID is the uid to impersonate.
	// +optional
	//ImpersonateUID string `json:"as-uid,omitempty"`
	// ImpersonateGroups is the groups to impersonate.
	// +optional
	//ImpersonateGroups []string `json:"as-groups,omitempty"`
	// ImpersonateUserExtra contains additional information for impersonated user.
	// +optional
	//ImpersonateUserExtra map[string][]string `json:"as-user-extra,omitempty"`
	// Username is the username for basic authentication to the kubernetes cluster.
	// +optional
	//Username string `json:"username,omitempty"`
	// Password is the password for basic authentication to the kubernetes cluster.
	// +optional
	//Password string `json:"password,omitempty" datapolicy:"password"`
	// AuthProvider specifies a custom authentication plugin for the kubernetes cluster.
	// +optional
	//AuthProvider *AuthProviderConfig `json:"auth-provider,omitempty"`
	// Exec specifies a custom exec-based authentication plugin for the kubernetes cluster.
	// +optional
	//Exec *ExecConfig `json:"exec,omitempty"`
	// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
	// +optional
	//Extensions []NamedExtension `json:"extensions,omitempty"`
}


// NamedCluster relates nicknames to cluster information
message NamedCluster {
	// Name is the nickname for this Cluster
	optional string name = 1; //Name string `json:"name"`
	// Cluster holds the cluster information
	//Cluster Cluster `json:"cluster"`
	optional Cluster cluster = 2;
}



// Cluster contains information about how to communicate with a kubernetes cluster
message Cluster {
	// Server is the address of the kubernetes cluster (https://hostname:port).
	optional string server = 1;
	//Server string `json:"server"`
	
	// TLSServerName is used to check server certificate. If TLSServerName is empty, the hostname used to contact the server is used.
	// +optional
	// TLSServerName string `json:"tls-server-name,omitempty"`
	optional string tls_server_name = 2 [ json_name = "tls-server-name" ]; 

	// InsecureSkipTLSVerify skips the validity check for the server's certificate. This will make your HTTPS connections insecure.
	// +optional
	//InsecureSkipTLSVerify bool `json:"insecure-skip-tls-verify,omitempty"`
	optional bool insecure_skip_tls_verify = 3 [json_name = "insecure-skip-tls-verify" ];
	
	// CertificateAuthority is the path to a cert file for the certificate authority.
	// +optional
	// CertificateAuthority string `json:"certificate-authority,omitempty"`
	optional string certificate_authority = 4 [json_name="certificate-authority"]; 

	// CertificateAuthorityData contains PEM-encoded certificate authority certificates. Overrides CertificateAuthority
	// +optional
//	CertificateAuthorityData []byte `json:"certificate-authority-data,omitempty"`
	optional bytes certificate_authority_data = 5 [json_name="certificate-authority-data"];

	// ProxyURL is the URL to the proxy to be used for all requests made by this
	// client. URLs with "http", "https", and "socks5" schemes are supported.  If
	// this configuration is not provided or the empty string, the client
	// attempts to construct a proxy configuration from http_proxy and
	// https_proxy environment variables. If these environment variables are not
	// set, the client does not attempt to proxy requests.
	//
	// socks5 proxying does not currently support spdy streaming endpoints (exec,
	// attach, port forward).
	// +optional
	//ProxyURL string `json:"proxy-url,omitempty"`
	
	// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
	// +optional
	//Extensions []NamedExtension `json:"extensions,omitempty"`
}
